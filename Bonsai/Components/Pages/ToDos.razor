@page "/todos/{SelectedDate:datetime?}"
@inherits PageWithModal
@inject IJSRuntime JavaScript
@inject NavigationManager NavigationManager
@inject IFileService FileService
@inject IUserService UserService

<div id="progress-container">
    <div id="progress">
        <p>@_pageContents?["en"]!["progress"]:</p>
        <p>@UserService.IntensityProgress / @UserService.IntensityGoal</p>
    </div>

    <div id="today-progress-background">
        <div id="today-progress-foreground" style="height: @(SelectedDateCompletedToDosPercentage())%;"/>

        <p id="today-progress-percentage">@((int)SelectedDateCompletedToDosPercentage())%</p>
    </div>

    <div id="days-left">
        <p>@_pageContents?["en"]!["daysLeft"]:</p>
        <p>@UserService.DaysLeft</p>
    </div>
</div>

<div id="content-container">
    <div id="todo-navigation">
        <button disabled="@(_selectedDate <= _oldestToDoDate)" @onclick="PreviousToDos">&lt;</button>

        <p> 
            @if (_selectedDate == DateTime.Today.AddDays(-1))
            {
                <span>@_pageContents?["en"]!["yesterday"],</span>
            }

            else if (_selectedDate == DateTime.Today)
            {
                <span>@_pageContents?["en"]!["today"],</span>
            }

            else if (_selectedDate == DateTime.Today.AddDays(1))
            {
                <span>@_pageContents?["en"]!["tomorrow"],</span>
            }

            @_selectedDate.ToShortDateString()
        </p>

        <button disabled="@(_selectedDate >= DateTime.Today.AddDays(30))" @onclick="NextToDos">&gt;</button>
    </div>

    @if (_selectedDate >= DateTime.Today)
    {
        <button class="default-button" id="add-todo" @onclick="AddToDo">@_pageContents?["en"]!["toDo"]!["add"]</button>
    }

    @if (_selectedDateToDoList.Count > 0)
    {
        <p>@_pageContents?["en"]!["hint"]</p>
    }

    <div id="todos-container">
        @foreach (var toDo in _selectedDateToDoList)
        {
            <ToDoComponent 
                @key="toDo.Id"
                ToDo="toDo"
                Easy="@_pageContents?["en"]!["toDo"]!["difficulty"]!["easy"]!.ToString()"
                Medium="@_pageContents?["en"]!["toDo"]!["difficulty"]!["medium"]!.ToString()"
                Hard="@_pageContents?["en"]!["toDo"]!["difficulty"]!["hard"]!.ToString()"
                OnCompleted="async () => await UpdateToDo(toDo)"
                OnEdited="() => EditToDo(toDo.Id)"
                OnDeleted="async () => await DeleteToDo(toDo)"
            />
        }
    </div>
</div>

@if (_pageContents == null)
{
    return;
}

@if (_showIntensitySelectionModal)
{
    <IntensitySelectionModal 
        FirstLaunch="true" 
        OnAnimationEndedCallback="(eventArgs) => HideModal(eventArgs, ref _showIntensitySelectionModal)" 
    />
}

@code
{
    private static JsonNode? _pageContents;
    private List<ToDo> _toDoList = new();
    private List<ToDo> _selectedDateToDoList = new();
    private DateTime _selectedDate = DateTime.Today;
    private DateTime _oldestToDoDate;
    private bool _showIntensitySelectionModal;

    protected override async Task OnInitializedAsync()
    {
        _pageContents ??= await FileService.ReadRawDataAsync(Files.ToDosPageContents);

        if (!UserService.IntensitySelected)
        {
            _showIntensitySelectionModal = true;
        }

        _toDoList = await App.ToDoRepository.GetAllAsync();

        if (SelectedDate != null)
        {
            _selectedDate = (DateTime)SelectedDate;
            await UserService.UpdateBonsaiStage((int)SelectedDateCompletedToDosPercentage());
        }

        _selectedDateToDoList = _toDoList.Where(t => t.Date == _selectedDate).ToList();
        _oldestToDoDate = _toDoList.Min(t => t.Date);
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await JavaScript.InvokeVoidAsync("matchWidth", ".todo-difficulty");
    }

    [Parameter]
    public DateTime? SelectedDate { get; set; }

    private void PreviousToDos()
    {
        _selectedDate = _selectedDate.AddDays(-1);
        _selectedDateToDoList = _toDoList.Where(t => t.Date == _selectedDate).ToList();
    }

    private void NextToDos()
    {
        _selectedDate = _selectedDate.AddDays(1);
        _selectedDateToDoList = _toDoList.Where(t => t.Date == _selectedDate).ToList();
    }

    private void AddToDo()
    {
        NavigationManager.NavigateTo($"/AddToDo/{_selectedDate.ToString("yyyy-MM-dd")}");
    }

    private void EditToDo(int id)
    {
        NavigationManager.NavigateTo($"/EditToDo/{id}");
    }

    private async Task UpdateToDo(ToDo toDo)
    {
        await UserService.UpdateBonsaiStage((int)SelectedDateCompletedToDosPercentage());
        await App.ToDoRepository.UpdateAsync(toDo);
    }

    private async Task DeleteToDo(ToDo toDo)
    {
        _toDoList.Remove(toDo);
        _selectedDateToDoList.Remove(toDo);
        await UserService.UpdateBonsaiStage((int)SelectedDateCompletedToDosPercentage());
        await App.ToDoRepository.DeleteAsync(toDo);
    }

    private float SelectedDateCompletedToDosPercentage()
    {
        if (_selectedDateToDoList.Count <= 0)
        {
            return 0f;
        }

        return (float)_selectedDateToDoList.Where(t => t.IsCompleted).Count() / _selectedDateToDoList.Count * 100;
    }
}
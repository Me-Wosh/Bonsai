@page "/ToDos/{SelectedDate:datetime?}"
@inject IJSRuntime JavaScript
@inject NavigationManager NavigationManager
@inject AppState AppState
@inject IFileService FileService

<div id="progress-container">
    <div id="progress-background">
        <div id="progress-foreground" style="height: @(SelectedDateCompletedToDos())%;"/>

        <p id="progress-percentage">@((int)SelectedDateCompletedToDos())%</p>
    </div>
</div>

<div id="content-container">
    <div id="todo-navigation">
        <button 
            disabled="@(!_toDoList.Exists(t => t.Date < _selectedDate))" 
            @onclick="() => _selectedDate = _selectedDate.AddDays(-1)"
        >
            &lt;
        </button>

        <p> 
            @if (_selectedDate == DateTime.Today.AddDays(-1))
            {
                <span>@_pageContents?["en"]!["yesterday"],</span>
            }

            else if (_selectedDate == DateTime.Today)
            {
                <span>@_pageContents?["en"]!["today"],</span>
            }

            else if (_selectedDate == DateTime.Today.AddDays(1))
            {
                <span>@_pageContents?["en"]!["tomorrow"],</span>
            }

            @_selectedDate.ToShortDateString()
        </p>

        <button 
            disabled="@(_selectedDate >= DateTime.Today.AddDays(30))" 
            @onclick="() => _selectedDate = _selectedDate.AddDays(1)"
        >
            &gt;
        </button>
    </div>

    @if (_selectedDate >= DateTime.Today)
    {
        <button class="default-button" id="add-todo" @onclick="AddToDo">@_pageContents?["en"]!["toDo"]!["add"]</button>
    }

    @if (_toDoList.Where(t => t.Date == _selectedDate).Count() > 0)
    {
        <p>@_pageContents?["en"]!["hint"]</p>
    }

    <div id="todos-container">
        @foreach (var toDo in _toDoList.Where(t => t.Date == _selectedDate))
        {
            <ToDoComponent 
                @key="toDo.Id"
                ToDo="toDo"
                Easy="@_pageContents?["en"]!["toDo"]!["difficulty"]!["easy"]!.ToString()"
                Medium="@_pageContents?["en"]!["toDo"]!["difficulty"]!["medium"]!.ToString()"
                Hard="@_pageContents?["en"]!["toDo"]!["difficulty"]!["hard"]!.ToString()"
                OnCompleted="async () => await UpdateToDoAsync(toDo)"
                OnEdited="() => EditToDo(toDo.Id)"
                OnDeleted="async () => await DeleteToDoAsync(toDo)"
            />
        }
    </div>
</div>

@if (_pageContents == null)
{
    return;
}

@if (_showIntensitySelectionModal)
{
    <Modal
        HeaderText="@_pageContents?["en"]!["modal"]!["header"]!.ToString()"
        FooterButtonText="@_pageContents?["en"]!["modal"]!["button"]!.ToString()"
        OnAnimationEndedCallback="HideModalAsync"
    >
        <BodyContent>
            <div id="body-content">
                <p>@_pageContents?["en"]!["modal"]!["tip"]</p>

                <p>
                    <span class="bold">@_intensity</span> 
                    @(_intensity > 1 ? _pageContents?["en"]!["modal"]!["days"] : _pageContents?["en"]!["modal"]!["day"]) 
                    @_pageContents?["en"]!["modal"]!["aWeek"]
                </p>

                <input id="intensity" type="range" min="1" max="7" @bind="_intensity" @bind:event="oninput" />

                @if (_intensity < 3)
                {
                    <img class="intensity-icon" src="./icons/thumbs_up_icon.png" />
                    <p class="intensity-text">@_pageContents?["en"]!["modal"]!["intensity"]!["min"]</p>
                }

                else if (_intensity < 5)
                {
                    <img class="intensity-icon" src="./icons/biceps_icon.png" />
                    <p class="intensity-text">@_pageContents?["en"]!["modal"]!["intensity"]!["medium"]</p>
                }

                else
                {
                    <img class="intensity-icon" src="./icons/dumbbell_icon.png" />
                    <p class="intensity-text">@_pageContents?["en"]!["modal"]!["intensity"]!["max"]</p>
                }
            </div>
        </BodyContent>
    </Modal>
}

@code
{
    private static JsonNode? _pageContents;
    private List<ToDo> _toDoList = new();
    private DateTime _selectedDate = DateTime.Today;
    private bool _showIntensitySelectionModal;
    private byte _intensity = 1;

    protected override async Task OnInitializedAsync()
    {
        if (_pageContents == null)
        {
            _pageContents = await FileService.ReadRawDataAsync(Files.ToDosPageContents);
        }

        if (!AppState.User.IntensitySelected)
        {
            _showIntensitySelectionModal = true;
        }

        _toDoList = await App.ToDoRepository.GetAllAsync();
    }

    protected override void OnParametersSet()
    {
        if (SelectedDate == null)
        {
            return;
        }

        _selectedDate = (DateTime)SelectedDate;    
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await JavaScript.InvokeVoidAsync("matchWidth", ".todo-difficulty");
    }

    [Parameter]
    public DateTime? SelectedDate { get; set; }

    private void AddToDo()
    {
        NavigationManager.NavigateTo($"/AddToDo/{_selectedDate.ToString("yyyy-MM-dd")}");
    }

    private void EditToDo(int id)
    {
        NavigationManager.NavigateTo($"/EditToDo/{id}");
    }

    private async Task UpdateToDoAsync(ToDo toDo)
    {
        await App.ToDoRepository.UpdateAsync(toDo);
    }

    private async Task DeleteToDoAsync(ToDo toDo)
    {
        _toDoList.Remove(toDo);
        await App.ToDoRepository.DeleteAsync(toDo);
    }

    private float SelectedDateCompletedToDos()
    {
        var allSelectedDateToDos = _toDoList.Where(t => t.Date == _selectedDate);
        var allSelectedDateToDosCount = allSelectedDateToDos.Count();

        if (allSelectedDateToDosCount <= 0)
        {
            return 0f;
        }

        return (float)allSelectedDateToDos.Where(t => t.IsCompleted).Count() / allSelectedDateToDosCount * 100;
    }

    private async Task HideModalAsync(AnimationEndedEventArgs eventArgs)
    {
        if (eventArgs.AnimationName != "fadeout")
        {
            return;
        }

        _showIntensitySelectionModal = false;

        AppState.User.IntensitySelected = true;
        AppState.User.IntensityGoal = _intensity;

        await FileService.UpdateUserDataAsync(Files.User, AppState.User);
    }
}
@page "/"
@inject IFileService FileService
@inject ILocationService LocationService
@inject IWeatherService WeatherService

<div id="container">
    <div id="window-container">
        <img id="weather" src="./images/weather/@_weatherImagePath" />
        <img id="window" src="./images/window.png" />
    </div>

    <div id="tree-container">
        <img src="./images/window.png" />
    </div>
</div>

@if (_paragraphsContents != null)
{
    @if (_showLocationInfoModal)
    {
        <InfoModal
            HeaderText="@(_paragraphsContents?.GetProperty("en").GetProperty("locationUsage").GetProperty("heading").ToString())"
            BodyText="@(_paragraphsContents?.GetProperty("en").GetProperty("locationUsage").GetProperty("body").ToString())"
            FooterButtonText="@(_paragraphsContents?.GetProperty("en").GetProperty("locationUsage").GetProperty("button").ToString())" 
            OnAnimationEndedCallback="HideLocationInfoModal" 
        />
    }

    @if (_showLocationTurnedOffModal)
    {
        <InfoModal 
            HeaderText="@(_paragraphsContents?.GetProperty("en").GetProperty("locationTurnedOff").GetProperty("heading").ToString())"
            BodyText="@(_paragraphsContents?.GetProperty("en").GetProperty("locationTurnedOff").GetProperty("body").ToString())"
            OnAnimationEndedCallback="HideLocationTurnedOffModal"
        />
    }

    @if (_showLocationRejectionModal)
    {
        <InfoModal
            HeaderText="@(_paragraphsContents?.GetProperty("en").GetProperty("locationRejection").GetProperty("heading").ToString())"
            BodyText="@(_paragraphsContents?.GetProperty("en").GetProperty("locationRejection").GetProperty("body").ToString())"
        />
    }
}

@code
{
    private JsonElement? _paragraphsContents;
    private UserData? _userData;
    private Weather _weather = new();
    private string _weatherImagePath;
    private bool _isBusy;
    private bool _showLocationInfoModal;
    private bool _showLocationTurnedOffModal;
    private bool _showLocationRejectionModal;

    public BonsaiTree()
    {
        _weatherImagePath = GetWeatherImagePath();
    }

    protected override async void OnInitialized()
    {
        var weatherTimeDifference = DateTime.Now - _weather?.LastUpdate;

        if (_isBusy || _showLocationInfoModal || weatherTimeDifference?.TotalHours < 1 || _paragraphsContents != null)
        {
            return;
        }

        _paragraphsContents = await FileService.ReadRawDataAsync("BonsaiTreePageContents");
        _userData = await FileService.ReadUserDataAsync<UserData>("user");

        if (_userData == null)
        {
            _showLocationInfoModal = true;
            StateHasChanged();
            return;
        }

        await GetWeatherAsync();
    }

    private async Task GetWeatherAsync()
    {
        _isBusy = true;

        var locationResponse = await LocationService.GetCurrentLocationAsync();

        if (locationResponse.Status == GeoLocationResponseStatus.NotEnabled)
        {
            _showLocationTurnedOffModal = true;
            _isBusy = false;

            return;
        }

        if (_userData == null)
        {
            if (locationResponse.Status == GeoLocationResponseStatus.NoPermission)
            {
                _showLocationRejectionModal = true;
            }

            _userData = new UserData
            {
                LastUpdate = DateTime.Now,
                GeoLocationUsageAcknowledged = true
            };

            await FileService.UpdateUserDataAsync<UserData>("user", _userData);
        }

        _weather = await WeatherService.GetWeatherAsync(locationResponse.GeoLocation);
        _weatherImagePath = GetWeatherImagePath();

        _isBusy = false;
    }

    private string GetWeatherImagePath()
    {
        var weatherType = _weather.WeatherType;
        var partOfTheDay = GetPartOfTheDay();

        if (weatherType == WeatherType.Sunny && partOfTheDay == DayPart.Night)
        {
            return "clear_night.png";
        }

        if (weatherType is WeatherType.Sunny or WeatherType.PartlyCloudy)
        {
            return weatherType + "_" + partOfTheDay + ".png";
        }

        var weatherImagePath = _weather.WeatherType;

        if (partOfTheDay == DayPart.Night)
        {
            weatherImagePath += "_night";
        }

        if (weatherType == WeatherType.Cloudy)
        {
            return weatherImagePath + ".png";
        }

        return weatherImagePath + ".gif";
    }

    private string GetPartOfTheDay()
    {
        var currentHour = DateTime.Now.Hour;

        if (currentHour is >= 5 and < 12)
        {
            return DayPart.Morning;
        }

        if (currentHour is >= 12 and < 17)
        {
            return DayPart.Afternoon;
        }

        if (currentHour is >= 17 and < 21)
        {
            return DayPart.Evening;
        }

        return DayPart.Night;
    }

    private async Task HideLocationInfoModal(AnimationEndedEventArgs eventArgs)
    {
        if (eventArgs.AnimationName != "fadeout")
        {
            return;
        }

        _showLocationInfoModal = false;

        await GetWeatherAsync(); 
    }

    private void HideLocationTurnedOffModal(AnimationEndedEventArgs eventArgs)
    {
        if (eventArgs.AnimationName != "fadeout")
        {
            return;
        }

        _showLocationTurnedOffModal = false;
    }
}
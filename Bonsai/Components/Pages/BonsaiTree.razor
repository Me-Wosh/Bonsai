@page "/"
@implements IDisposable
@inherits PageWithModal
@inject IFileService FileService
@inject ILocationService LocationService
@inject IUserService UserService
@inject IWeatherService WeatherService

<div id="container">
    <div id="streak-container">
        <img src="./icons/plant_icon.png" />

        <p>@UserService.Streak</p>

        <p id="streak-tooltip">@_pageContents?["en"]!["streakTooltip"]</p>
    </div>

    <div id="window-section">
        <div id="window-container">
            <img id="weather" src="./images/weather/@_weatherImagePath" />
            <img id="window" src="./images/window.png" />
        </div>
    </div>

    <div id="tree-section">
        <p>tree stage: @UserService.BonsaiStage</p>
    </div>
</div>

@if (_pageContents == null)
{
    return;
}

@if (_showLocationUsageModal)
{
    <InfoModal
        HeaderText="@_pageContents?["en"]!["modal"]!["locationUsage"]!["header"]!.ToString()"
        BodyText="@_pageContents?["en"]!["modal"]!["locationUsage"]!["body"]!.ToString()"
        FooterButtonText="@_pageContents?["en"]!["modal"]!["locationUsage"]!["button"]!.ToString()" 
        OnAnimationEndedCallback="HideLocationInfoModal" 
    />
}   

@if (_showLocationTurnedOffModal)
{
    <InfoModal 
        HeaderText="@_pageContents?["en"]!["modal"]!["locationTurnedOff"]!["header"]!.ToString()"
        BodyText="@_pageContents?["en"]!["modal"]!["locationTurnedOff"]!["body"]!.ToString()"
        OnAnimationEndedCallback="(eventArgs) => HideModal(eventArgs, ref _showLocationTurnedOffModal)"
    />
}

@code
{
    private static JsonNode? _pageContents;
    private static Weather _weather = new();
    private static string? _weatherImagePath = GetWeatherImagePath();
    private static bool _isBusy;
    private bool _showLocationUsageModal;
    private bool _showLocationTurnedOffModal;

    protected override async Task OnInitializedAsync()
    {
        await UserService.ResetBonsaiIfGoalNotAchievable();

        WeatherChanged += StateHasChanged;

        _pageContents ??= await FileService.ReadRawDataAsync(Files.BonsaiTreePageContents);
            
        if (!UserService.LocationUsageAcknowledged)
        {
            _showLocationUsageModal = true;
            return;
        }

        var timeSinceLastWeatherUpdate = DateTime.Now - Weather.LastUpdate;

        if (timeSinceLastWeatherUpdate?.TotalHours < 1)
        {
            return;
        }

        await GetWeatherAsync();
    }

    private static event Action? WeatherChanged;

    private static Weather Weather
    {
        get => _weather;

        set
        {
            _weather = value;
            _weatherImagePath = GetWeatherImagePath();
            WeatherChanged?.Invoke();
        }
    }

    private async Task GetWeatherAsync()
    {
        if (_isBusy)
        {
            return;
        }

        _isBusy = true;

        var locationResponse = await LocationService.GetCurrentLocationAsync();

        await HandleLocationUsagePermission(locationResponse.Status);

        Weather = await WeatherService.GetWeatherAsync(locationResponse.GeoLocation);

        _isBusy = false;
    }

    private async Task HandleLocationUsagePermission(GeoLocationResponseStatus status)
    {
        if (UserService.LocationUsageAcknowledged)
        {
            return;
        }

        await UserService.LocationUsageWasAcknowledged();

        if (status == GeoLocationResponseStatus.NotEnabled)
        {
            _showLocationTurnedOffModal = true;
        }
    }

    private static string GetWeatherImagePath()
    {
        var weatherType  = Weather.WeatherType;
        var partOfTheDay = GetPartOfTheDay();

        if (weatherType == WeatherType.Sunny && partOfTheDay == DayPart.Night)
        {
            return "clear_night.png";
        }

        if (weatherType is WeatherType.Sunny or WeatherType.PartlyCloudy)
        {
            return weatherType + "_" + partOfTheDay + ".png";
        }

        var weatherImagePath = weatherType;

        if (partOfTheDay == DayPart.Night)
        {
            weatherImagePath += "_night";
        }

        if (weatherType == WeatherType.Cloudy)
        {
            return weatherImagePath + ".png";
        }

        return weatherImagePath + ".gif";
    }

    private static string GetPartOfTheDay()
    {
        var currentHour = DateTime.Now.Hour;

        if (currentHour is >= 5 and < 12)
        {
            return DayPart.Morning;
        }

        if (currentHour is >= 12 and < 17)
        {
            return DayPart.Afternoon;
        }

        if (currentHour is >= 17 and < 21)
        {
            return DayPart.Evening;
        }

        return DayPart.Night;
    }

    private async Task HideLocationInfoModal(AnimationEndedEventArgs eventArgs)
    {
        if (!HideModal(eventArgs, ref _showLocationUsageModal))
        {
            return;
        }

        await GetWeatherAsync(); 
    }

    public void Dispose()
    {
        WeatherChanged -= StateHasChanged;
    }
}
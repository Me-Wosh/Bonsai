@page "/"
@implements IDisposable
@inject AppState AppState
@inject IFileService FileService
@inject ILocationService LocationService
@inject IWeatherService WeatherService

<div id="container">
    <div id="window-section">
        <div id="window-container">
            <img id="weather" src="./images/weather/@_weatherImagePath" />
            <img id="window" src="./images/window.png" />
        </div>
    </div>

    <div id="tree-section">
        <img src="./images/window.png" />
    </div>
</div>

@if (_pageContents == null)
{
    return;
}

@if (_showLocationUsageModal)
{
    <InfoModal
        HeaderText="@_pageContents?["en"]!["locationUsageModal"]!["header"]!.ToString()"
        BodyText="@_pageContents?["en"]!["locationUsageModal"]!["body"]!.ToString()"
        FooterButtonText="@_pageContents?["en"]!["locationUsageModal"]!["button"]!.ToString()" 
        OnAnimationEndedCallback="HideLocationInfoModalAsync" 
    />
}   

@if (_showLocationTurnedOffModal)
{
    <InfoModal 
        HeaderText="@_pageContents?["en"]!["locationTurnedOffModal"]!["header"]!.ToString()"
        BodyText="@_pageContents?["en"]!["locationTurnedOffModal"]!["body"]!.ToString()"
        OnAnimationEndedCallback="(AnimationEndedEventArgs eventArgs) => HideModal(eventArgs, ref _showLocationTurnedOffModal)"
    />
}   

@if (_showLocationRejectionModal)
{
    <InfoModal
        HeaderText="@_pageContents?["en"]!["locationRejectionModal"]!["header"]!.ToString()"
        BodyText="@_pageContents?["en"]!["locationRejectionModal"]!["body"]!.ToString()"
        OnAnimationEndedCallback="(AnimationEndedEventArgs eventArgs) => HideModal(eventArgs, ref _showLocationRejectionModal)"
    />
}   

@code
{
    private static JsonNode? _pageContents;
    private static Weather _weather = new();
    private static string? _weatherImagePath = GetWeatherImagePath();
    private static bool _isBusy;
    private bool _showLocationUsageModal;
    private bool _showLocationTurnedOffModal;
    private bool _showLocationRejectionModal;

    protected override async Task OnInitializedAsync()
    {
        WeatherChanged += StateHasChanged;

        if (_pageContents == null)
        {
            _pageContents = await FileService.ReadRawDataAsync("BonsaiTreePageContents.json");
        }
            
        if (!AppState.User.LocationUsageAcknowledged)
        {
            _showLocationUsageModal = true;
            return;
        }

        var timeSinceLastWeatherUpdate = DateTime.Now - Weather.LastUpdate;

        if (timeSinceLastWeatherUpdate?.TotalHours < 1)
        {
            return;
        }

        await GetWeatherAsync();
    }

    private static event Action WeatherChanged;

    private static Weather Weather
    {
        get => _weather;

        set
        {
            _weather = value;
            _weatherImagePath = GetWeatherImagePath();
            WeatherChanged?.Invoke();
        }
    }

    private async Task GetWeatherAsync()
    {
        if (_isBusy)
        {
            return;
        }

        _isBusy = true;

        var locationResponse = await LocationService.GetCurrentLocationAsync();

        await HandleLocationUsagePermission(locationResponse.Status);

        Weather = await WeatherService.GetWeatherAsync(locationResponse.GeoLocation);

        _isBusy = false;
    }

    private async Task HandleLocationUsagePermission(GeoLocationResponseStatus status)
    {
        if (AppState.User.LocationUsageAcknowledged)
        {
            return;
        }

        AppState.User.LocationUsageAcknowledged = true;

        await FileService.UpdateUserDataAsync<User>("user.json", AppState.User);

        if (status == GeoLocationResponseStatus.NotEnabled)
        {
            _showLocationTurnedOffModal = true;
        }

        else if (status == GeoLocationResponseStatus.NoPermission)
        {
            _showLocationRejectionModal = true;
        }     
    }

    private static string GetWeatherImagePath()
    {
        var weatherType = Weather.WeatherType;
        var partOfTheDay = GetPartOfTheDay();

        if (weatherType == WeatherType.Sunny && partOfTheDay == DayPart.Night)
        {
            return "clear_night.png";
        }

        if (weatherType is WeatherType.Sunny or WeatherType.PartlyCloudy)
        {
            return weatherType + "_" + partOfTheDay + ".png";
        }

        var weatherImagePath = weatherType;

        if (partOfTheDay == DayPart.Night)
        {
            weatherImagePath += "_night";
        }

        if (weatherType == WeatherType.Cloudy)
        {
            return weatherImagePath + ".png";
        }

        return weatherImagePath + ".gif";
    }

    private static string GetPartOfTheDay()
    {
        var currentHour = DateTime.Now.Hour;

        if (currentHour is >= 5 and < 12)
        {
            return DayPart.Morning;
        }

        if (currentHour is >= 12 and < 17)
        {
            return DayPart.Afternoon;
        }

        if (currentHour is >= 17 and < 21)
        {
            return DayPart.Evening;
        }

        return DayPart.Night;
    }

    private bool HideModal(AnimationEndedEventArgs eventArgs, ref bool modalFlag)
    {
        if (eventArgs.AnimationName != "fadeout")
        {
            return false;
        }

        modalFlag = false;

        return true;
    }

    private async Task HideLocationInfoModalAsync(AnimationEndedEventArgs eventArgs)
    {
        if (!HideModal(eventArgs, ref _showLocationUsageModal))
        {
            return;
        }

        await GetWeatherAsync(); 
    }

    public void Dispose()
    {
        WeatherChanged -= StateHasChanged;
    }
}
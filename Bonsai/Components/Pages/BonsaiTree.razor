@page "/"
@implements IDisposable
@inject AppState AppState
@inject IFileService FileService
@inject ILocationService LocationService
@inject IWeatherService WeatherService

<div id="container">
    <div id="window-container">
        <img id="weather" src="./images/weather/@_weatherImagePath" />
        <img id="window" src="./images/window.png" />
    </div>

    <div id="tree-container">
        <img src="./images/window.png" />
    </div>
</div>

@if (_paragraphsContents != null)
{
    @if (_showLocationInfoModal)
    {
        <InfoModal
            HeaderText="@(_paragraphsContents?.GetProperty("en").GetProperty("locationUsage").GetProperty("heading").ToString())"
            BodyText="@(_paragraphsContents?.GetProperty("en").GetProperty("locationUsage").GetProperty("body").ToString())"
            FooterButtonText="@(_paragraphsContents?.GetProperty("en").GetProperty("locationUsage").GetProperty("button").ToString())" 
            OnAnimationEndedCallback="HideLocationInfoModal" 
        />
    }

    @if (_showLocationTurnedOffModal)
    {
        <InfoModal 
            HeaderText="@(_paragraphsContents?.GetProperty("en").GetProperty("locationTurnedOff").GetProperty("heading").ToString())"
            BodyText="@(_paragraphsContents?.GetProperty("en").GetProperty("locationTurnedOff").GetProperty("body").ToString())"
            OnAnimationEndedCallback="(AnimationEndedEventArgs eventArgs) => HideModal(eventArgs, ref _showLocationTurnedOffModal)"
        />
    }

    @if (_showLocationRejectionModal)
    {
        <InfoModal
            HeaderText="@(_paragraphsContents?.GetProperty("en").GetProperty("locationRejection").GetProperty("heading").ToString())"
            BodyText="@(_paragraphsContents?.GetProperty("en").GetProperty("locationRejection").GetProperty("body").ToString())"
            OnAnimationEndedCallback="(AnimationEndedEventArgs eventArgs) => HideModal(eventArgs, ref _showLocationRejectionModal)"
        />
    }
}

@code
{
    private static JsonElement? _paragraphsContents;
    private static Weather _weather = new();
    private static string? _weatherImagePath = GetWeatherImagePath();
    private static bool _isBusy;
    private bool _showLocationInfoModal;
    private bool _showLocationTurnedOffModal;
    private bool _showLocationRejectionModal;

    protected override async void OnInitialized()
    {
        WeatherChanged += StateHasChanged;

        if (_paragraphsContents == null)
        {
            _paragraphsContents = await FileService.ReadRawDataAsync("BonsaiTreePageContents");
        }

        if (_showLocationInfoModal)
        {
            return;
        }

        if (AppState.UserData == null)
        {
            AppState.UserData = await FileService.ReadUserDataAsync<UserData>("user");

            // if user has launched the app for the first time
            if (AppState.UserData == null)
            {
                _showLocationInfoModal = true;
                return;
            }
        }

        var timeSinceLastWeatherUpdate = DateTime.Now - Weather.LastUpdate;

        if (timeSinceLastWeatherUpdate?.TotalHours < 1)
        {
            return;
        }

        await GetWeatherAsync();
    }

    private static event Action WeatherChanged;

    private static Weather Weather
    {
        get => _weather;

        set
        {
            _weather = value;
            _weatherImagePath = GetWeatherImagePath();
            WeatherChanged?.Invoke();
        }
    }

    private async Task GetWeatherAsync()
    {
        if (_isBusy)
        {
            return;
        }

        _isBusy = true;

        var locationResponse = await LocationService.GetCurrentLocationAsync();

        await HandleLocationUsagePermission(locationResponse.Status);

        Weather = await WeatherService.GetWeatherAsync(locationResponse.GeoLocation);

        _isBusy = false;
    }

    private async Task HandleLocationUsagePermission(GeoLocationResponseStatus status)
    {
        if (AppState.UserData != null)
        {
            return;
        }

        AppState.UserData = new UserData
        {
            LastUpdate = DateTime.Now,
            GeoLocationUsageAcknowledged = true
        };

        await FileService.UpdateUserDataAsync<UserData>("user", AppState.UserData);

        if (status == GeoLocationResponseStatus.NotEnabled)
        {
            _showLocationTurnedOffModal = true;
        }

        else if (status == GeoLocationResponseStatus.NoPermission)
        {
            _showLocationRejectionModal = true;
        }     
    }

    private static string GetWeatherImagePath()
    {
        var weatherType = Weather.WeatherType;
        var partOfTheDay = GetPartOfTheDay();

        if (weatherType == WeatherType.Sunny && partOfTheDay == DayPart.Night)
        {
            return "clear_night.png";
        }

        if (weatherType is WeatherType.Sunny or WeatherType.PartlyCloudy)
        {
            return weatherType + "_" + partOfTheDay + ".png";
        }

        var weatherImagePath = weatherType;

        if (partOfTheDay == DayPart.Night)
        {
            weatherImagePath += "_night";
        }

        if (weatherType == WeatherType.Cloudy)
        {
            return weatherImagePath + ".png";
        }

        return weatherImagePath + ".gif";
    }

    private static string GetPartOfTheDay()
    {
        var currentHour = DateTime.Now.Hour;

        if (currentHour is >= 5 and < 12)
        {
            return DayPart.Morning;
        }

        if (currentHour is >= 12 and < 17)
        {
            return DayPart.Afternoon;
        }

        if (currentHour is >= 17 and < 21)
        {
            return DayPart.Evening;
        }

        return DayPart.Night;
    }

    private bool HideModal(AnimationEndedEventArgs eventArgs, ref bool modalFlag)
    {
        if (eventArgs.AnimationName != "fadeout")
        {
            return false;
        }

        modalFlag = false;

        return true;
    }

    private async Task HideLocationInfoModal(AnimationEndedEventArgs eventArgs)
    {
        if (!HideModal(eventArgs, ref _showLocationInfoModal))
        {
            return;
        }

        await GetWeatherAsync(); 
    }

    public void Dispose()
    {
        WeatherChanged -= StateHasChanged;
    }
}
@page "/ToDo"
@inject AppState AppState
@inject IFileService FileService

@if (_pageContents == null)
{
    return;
}

@if (_showIntensitySelectionModal)
{
    <Modal
        HeaderText="@_pageContents?["en"]!["modal"]!["header"]!.ToString()"
        FooterButtonText="@_pageContents?["en"]!["modal"]!["button"]!.ToString()"
        OnAnimationEndedCallback="HideModalAsync"
    >
        <BodyContent>
            <div id="body-content">
                <p>@_pageContents?["en"]!["modal"]!["tip"]</p>

                <p>
                    <span class="bold">@_intensity</span> @(_intensity > 1 ? _pageContents?["en"]!["modal"]!["days"] : _pageContents?["en"]!["modal"]!["day"]) @_pageContents?["en"]!["modal"]!["a week"]
                </p>

                <input id="intensity" type="range" min="1" max="7" @bind="_intensity" @oninput="UpdateIntensity" />

                @if (_intensity < 3)
                {
                    <img class="intensity-icon" src="./icons/thumbs_up_icon.png" />
                    <p class="intensity-text">@_pageContents?["en"]!["modal"]!["intensityMin"]</p>
                }

                else if (_intensity < 5)
                {
                    <img class="intensity-icon" src="./icons/biceps_icon.png" />
                    <p class="intensity-text">@_pageContents?["en"]!["modal"]!["intensityMedium"]</p>
                }

                else
                {
                    <img class="intensity-icon" src="./icons/dumbbell_icon.png" />
                    <p class="intensity-text">@_pageContents?["en"]!["modal"]!["intensityMax"]</p>
                }
            </div>
        </BodyContent>
    </Modal>
}

@code
{
    private static JsonNode? _pageContents;
    private bool _showIntensitySelectionModal;
    private byte _intensity = 1;

    protected override async Task OnInitializedAsync()
    {
        if (_pageContents == null)
        {
            _pageContents = await FileService.ReadRawDataAsync("ToDoPageContents.json");
        }

        if (!AppState.User.IntensitySelected)
        {
            _showIntensitySelectionModal = true;
        }      
    }

    private void UpdateIntensity(ChangeEventArgs e)
    {
        _intensity = Convert.ToByte(e.Value);
    }

    private async Task HideModalAsync(AnimationEndedEventArgs eventArgs)
    {
        if (eventArgs.AnimationName != "fadeout")
        {
            return;
        }

        _showIntensitySelectionModal = false;

        AppState.User.IntensitySelected = true;
        AppState.User.IntensityGoal = _intensity;

        await FileService.UpdateUserDataAsync<User>("user.json", AppState.User);
    }
}